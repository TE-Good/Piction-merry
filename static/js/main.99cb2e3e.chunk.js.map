{"version":3,"sources":["App.js","index.js"],"names":["App","useState","tool","lines","setLines","isDrawing","useRef","className","width","height","onMouseDown","e","current","pos","target","getStage","getPointerPosition","points","x","y","onMouseMove","point","lastLine","length","concat","splice","onMouseUp","text","map","line","i","stroke","strokeWidth","tension","lineCap","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAuEeA,MAnEf,WAAgB,IAAD,EACaC,mBAAS,OADtB,mBACJC,EADI,aAEeD,mBAAS,KAFxB,mBAEJE,EAFI,KAEGC,EAFH,KAGLC,EAAYC,kBAAO,GA0BzB,OACI,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,QAAD,CACIC,MAAO,IACPC,OAAQ,IACRC,YA9BY,SAACC,GACrBN,EAAUO,SAAU,EACpB,IAAMC,EAAMF,EAAEG,OAAOC,WAAWC,qBAChCZ,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAED,OAAMe,OAAQ,CAACJ,EAAIK,EAAGL,EAAIM,QA4BxCC,YAzBY,SAACT,GAErB,GAAKN,EAAUO,QAAf,CAEA,IACMS,EADQV,EAAEG,OAAOC,WACHC,qBAChBM,EAAWnB,EAAMA,EAAMoB,OAAS,GAGpCD,EAASL,OAASK,EAASL,OAAOO,OAAO,CAACH,EAAMH,EAAGG,EAAMF,IAGzDhB,EAAMsB,OAAOtB,EAAMoB,OAAS,EAAG,EAAGD,GAClClB,EAASD,EAAMqB,YAaPE,UAVU,kBAAOrB,EAAUO,SAAU,GAKzC,SAOI,eAAC,QAAD,WACI,cAAC,OAAD,CAAMe,KAAK,qBAAqBT,EAAG,EAAGC,EAAG,KACxChB,EAAMyB,KAAI,SAACC,EAAMC,GAAP,OACP,cAAC,OAAD,CAEIb,OAAQY,EAAKZ,OACbc,OAAO,UACPC,YAAa,EACbC,QAAS,GACTC,QAAQ,SALHJ,gBC1CjCK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.99cb2e3e.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useRef } from \"react\";\nimport { Stage, Layer, Line, Text } from \"react-konva\";\n\nfunction App() {\n    const [tool, setTool] = useState(\"pen\");\n    const [lines, setLines] = useState([]);\n    const isDrawing = useRef(false);\n\n    const handleMouseDown = (e) => {\n        isDrawing.current = true;\n        const pos = e.target.getStage().getPointerPosition();\n        setLines([...lines, { tool, points: [pos.x, pos.y] }]);\n    };\n\n    const handleMouseMove = (e) => {\n        // no drawing - skipping\n        if (!isDrawing.current) return;\n\n        const stage = e.target.getStage();\n        const point = stage.getPointerPosition();\n        let lastLine = lines[lines.length - 1];\n\n        // add point\n        lastLine.points = lastLine.points.concat([point.x, point.y]);\n\n        // replace last\n        lines.splice(lines.length - 1, 1, lastLine);\n        setLines(lines.concat());\n    };\n\n    const handleMouseUp = () => (isDrawing.current = false);\n\n    return (\n        <div className=\"App\">\n          <div className=\"stage-container\">\n            <Stage\n                width={300}\n                height={300}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n            >\n                <Layer>\n                    <Text text=\"Just start drawing\" x={5} y={30}></Text>\n                    {lines.map((line, i) => (\n                        <Line\n                            key={i}\n                            points={line.points}\n                            stroke=\"#df4b26\"\n                            strokeWidth={5}\n                            tension={0.5}\n                            lineCap=\"round\"\n                            // globalCompositeOperation={\n                            //     line.tool === \"eraser\"\n                            //         ? \"destination-out\"\n                            //         : \"source-over\"\n                            // }\n                        />\n                    ))}\n                </Layer>\n            </Stage>\n          </div>\n            {/* <select value={tool} onChange={(e) => setTool(e.target.value)}>\n                <option value=\"pen\">Pen</option>\n                <option value=\"eraser\">Eraser</option>\n            </select> */}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}